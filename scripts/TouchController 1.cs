//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/scripts/TouchController 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @TouchController1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchController1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchController 1"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""875f06cd-f851-46c4-ac91-5bdef057a075"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerTouch"",
                    ""type"": ""Value"",
                    ""id"": ""642afdec-9549-487e-8244-b72ef51065f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerTouch"",
                    ""type"": ""Value"",
                    ""id"": ""75599a47-10a9-46aa-9706-6b7dfcd884d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""b2284ff6-4737-46c3-b62e-76f9cf530eec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""220ba280-2fc2-4d51-95a8-2bbff2f17288"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""822995ad-72ff-4e63-801d-c1e17a7ab2fe"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2730f92b-fc28-42b1-81d5-c05a46a141bd"",
                    ""path"": ""<Touchscreen>/touch1/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryFingerTouch = m_Touch.FindAction("PrimaryFingerTouch", throwIfNotFound: true);
        m_Touch_SecondaryFingerTouch = m_Touch.FindAction("SecondaryFingerTouch", throwIfNotFound: true);
        m_Touch_SecondaryTouch = m_Touch.FindAction("SecondaryTouch", throwIfNotFound: true);
    }

    ~@TouchController1()
    {
        Debug.Assert(!m_Touch.enabled, "This will cause a leak and performance issues, TouchController1.Touch.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_PrimaryFingerTouch;
    private readonly InputAction m_Touch_SecondaryFingerTouch;
    private readonly InputAction m_Touch_SecondaryTouch;
    public struct TouchActions
    {
        private @TouchController1 m_Wrapper;
        public TouchActions(@TouchController1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerTouch => m_Wrapper.m_Touch_PrimaryFingerTouch;
        public InputAction @SecondaryFingerTouch => m_Wrapper.m_Touch_SecondaryFingerTouch;
        public InputAction @SecondaryTouch => m_Wrapper.m_Touch_SecondaryTouch;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @PrimaryFingerTouch.started += instance.OnPrimaryFingerTouch;
            @PrimaryFingerTouch.performed += instance.OnPrimaryFingerTouch;
            @PrimaryFingerTouch.canceled += instance.OnPrimaryFingerTouch;
            @SecondaryFingerTouch.started += instance.OnSecondaryFingerTouch;
            @SecondaryFingerTouch.performed += instance.OnSecondaryFingerTouch;
            @SecondaryFingerTouch.canceled += instance.OnSecondaryFingerTouch;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @PrimaryFingerTouch.started -= instance.OnPrimaryFingerTouch;
            @PrimaryFingerTouch.performed -= instance.OnPrimaryFingerTouch;
            @PrimaryFingerTouch.canceled -= instance.OnPrimaryFingerTouch;
            @SecondaryFingerTouch.started -= instance.OnSecondaryFingerTouch;
            @SecondaryFingerTouch.performed -= instance.OnSecondaryFingerTouch;
            @SecondaryFingerTouch.canceled -= instance.OnSecondaryFingerTouch;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnPrimaryFingerTouch(InputAction.CallbackContext context);
        void OnSecondaryFingerTouch(InputAction.CallbackContext context);
        void OnSecondaryTouch(InputAction.CallbackContext context);
    }
}
